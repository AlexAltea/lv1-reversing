/**
 * (c) 2016 The LV1RE Project.
 * Released under MIT license. Read LICENSE for more details.
 */

#include "graph.h"

#include "lv1/driver/rsx/assert.h"
#include "lv1/driver/rsx/mmio.h"
#include "lv1/driver/rsx/core/device.h"

static S32 rsx_ctxctl_ucode[] = {
    0x00400889, 0x00200000, 0x0060000A, 0x00200000,
    0x00300000, 0x00800001, 0x00700009, 0x0060000E,
    0x00400D64, 0x00400D05, 0x00408A65, 0x00408E06,
    0x00409C68, 0x00200000, 0x0060000A, 0x00700000,
    0x00106000, 0x00700080, 0x004014E6, 0x007000A0,
    0x00500060, 0x00200001, 0x0060000A, 0x0011814D,
    0x00110158, 0x00105401, 0x0020003A, 0x00100051,
    0x001040C5, 0x0010C1C4, 0x001041C9, 0x0010C1DC,
    0x00150210, 0x0012C225, 0x00108238, 0x0010823E,
    0x001242C0, 0x00200040, 0x00100280, 0x00128100,
    0x00128120, 0x00128143, 0x0011415F, 0x0010815C,
    0x0010C140, 0x00104029, 0x00110400, 0x00104D12, 
    0x00500060, 0x00403387, 0x0060000D, 0x004076E6, 
    0x002000F0, 0x0060000A, 0x00200020, 0x00100620, 
    0x00154650, 0x00104668, 0x0017466D, 0x0011068B, 
    0x00168691, 0x001046AE, 0x001046B0, 0x001206B4, 
    0x001046C4, 0x001146C6, 0x00200022, 0x001006CC, 
    0x001246F0, 0x002000C0, 0x00100700, 0x0010C3D7, 
    0x001043E1, 0x00500060, 0x00405100, 0x00405184,
    0x00600003, 0x00500067, 0x00600008, 0x00500060, 
    0x00700082, 0x00200268, 0x0060000A, 0x00104800, 
    0x00108901, 0x00124920, 0x0020001F, 0x00100940, 
    0x00140965, 0x0014CA00, 0x00104A19, 0x0010CA1C, 
    0x00118B00, 0x0020002C, 0x00100B08, 0x00134C2E, 
    0x0010CD00, 0x0010CD04, 0x00124D08, 0x00104D80, 
    0x00104E00, 0x0012D600, 0x00105C00, 0x00104F06, 
    0x00105406, 0x00200320, 0x0060000A, 0x00300000, 
    0x00200680, 0x00406F00, 0x00200684, 0x00800001, 
    0x00200B68, 0x0060000A, 0x0020A7D0, 0x0040758A, 
    0x00201350, 0x00800041, 0x00408400, 0x00600006, 
    0x00700003, 0x004080E6, 0x00700080, 0x00200320, 
    0x0060000A, 0x00200004, 0x00800001, 0x00700000, 
    0x00200000, 0x0060000A, 0x00106002, 0x00409C68, 
    0x00700000, 0x00200000, 0x0060000A, 0x00106002, 
    0x00700080, 0x00400A68, 0x00500060, 0x00600007, 
    0x00408E88, 0x0060000F, 0x00500060, 0x00200000, 
    0x0060000A, 0x00700000, 0x00106001, 0x00700083, 
    0x00915100, 0x00903FFE, 0x80940000, 0x00200020, 
    0x0060000B, 0x00500069, 0x0060000C, 0x00401568, 
    0x00409E06, 0x00409F05, 0x00600009, 0x00700005, 
    0x00700006, 0x0060000E
};

// 
static S32 data1[] = {
    0x00000004, 0x00000000, 0x00000008, 0x00000000,
    0x0000000C, 0x00000000, 0x00000010, 0x00000000,
    0x00000014, 0x00000000, 0x00000018, 0x00000000,
    0x0000001C, 0x00000000, 0x00000020, 0x00000000,
    0x00000024, 0x0000FFFF, 0x00000028, 0x0000FFFF,
    0x0000002C, 0x00000000, 0x00000030, 0x00000000,
    0x00000034, 0x00000000, 0x00000038, 0x00000000,
    0x0000003C, 0x00000000, 0x00000040, 0x00000000,
    0x00000044, 0x00000000, 0x00000048, 0x00000000,
    0x0000004C, 0x00000000, 0x00000050, 0x00000000,
    0x00000054, 0x00000000, 0x00000058, 0x00000000,
    0x0000005C, 0x00000000, 0x00000060, 0x00000000,
    0x00000064, 0x00000000, 0x00000068, 0x00000000,
    0x0000006C, 0x00000000, 0x00000070, 0x00000000,
    0x00000074, 0x00000000, 0x00000078, 0x00000000,
    0x0000007C, 0x00000000, 0x00000080, 0x00000000,
    0x00000084, 0x00000000, 0x00000088, 0x00000000,
    0x0000008C, 0x00000000, 0x00000090, 0x00000000,
    0x00000094, 0x00000000, 0x00000098, 0x00000000,
    0x0000009C, 0x00000000, 0x000000A0, 0x00000000,
    0x000000A4, 0x00000000, 0x000000A8, 0x00000000,
    0x000000AC, 0x00000000, 0x000000B0, 0x00000000,
    0x000000B4, 0x00000000, 0x000000B8, 0x00000000,
    0x000000BC, 0x00000000, 0x000000C0, 0x00000000,
    0x000000C4, 0x00000000, 0x000000C8, 0x00000000,
    0x000000CC, 0x00000000, 0x000000D0, 0x00000000,
    0x000000D4, 0x00000000, 0x000000D8, 0x00000000,
    0x000000DC, 0x00000000, 0x000000E0, 0x00000000,
    0x000000E4, 0x00000000, 0x000000E8, 0x00000000,
    0x000000EC, 0x00000000, 0x000000F0, 0x00000000,
    0x000000F4, 0x00000000, 0x000000F8, 0x00000000,
    0x000000FC, 0x00000000, 0x00000100, 0x00000000,
    0x00000104, 0x00000000, 0x00000108, 0x00000000,
    0x0000010C, 0x00000000, 0x00000110, 0x00000000,
    0x00000114, 0x00000000, 0x00000118, 0x00000000,
    0x0000011C, 0x20010001, 0x00000120, 0x0F73EF00,
    0x00000124, 0x00000000, 0x00000128, 0x02008821,
    0x0000012C, 0x00000000, 0x00000130, 0x00000000,
    0x00000134, 0x00000000, 0x00000138, 0x00000000,
    0x0000013C, 0x00000000, 0x00000140, 0x00000000,
    0x00000144, 0x00000000, 0x00000148, 0x00000000,
    0x0000014C, 0x00000000, 0x00000150, 0x00000000,
    0x00000154, 0x00000000, 0x00000158, 0x00000001,
    0x0000015C, 0x00000001, 0x00000160, 0x00000001,
    0x00000164, 0x00000001, 0x00000168, 0x00000001,
    0x0000016C, 0x00000001, 0x00000170, 0x00000001,
    0x00000174, 0x00000001, 0x00000178, 0x00000040,
    0x0000017C, 0x00000040, 0x00000180, 0x00000040,
    0x00000184, 0x00000000, 0x00000188, 0x00000040,
    0x0000018C, 0x00000000, 0x00000190, 0x00000000,
    0x00000194, 0x00000000, 0x00000198, 0x00000000,
    0x0000019C, 0x00000000, 0x000001A0, 0x00000000,
    0x000001A4, 0x00000000, 0x000001A8, 0x00000000,
    0x000001AC, 0x00000000, 0x000001B0, 0x00000000,
    0x000001B4, 0x00000000, 0x000001B8, 0x00000000,
    0x000001BC, 0x00000000, 0x000001C0, 0x00000000,
    0x000001C4, 0x00000000, 0x000001C8, 0x00000000,
    0x000001CC, 0x00000000, 0x000001D0, 0x0B0B0B0C,
    0x000001D4, 0x00000000, 0x000001D8, 0x00000000,
    0x000001DC, 0x00000000, 0x000001E0, 0x00000000,
    0x000001E4, 0x00000000, 0x000001E8, 0x00000000,
    0x000001EC, 0x00000000, 0x000001F0, 0x00000000,
    0x000001F4, 0x00000000, 0x000001F8, 0x00000000,
    0x000001FC, 0x00000000, 0x00000200, 0x00000000,
    0x00000204, 0x00000000, 0x00000208, 0x00000000,
    0x0000020C, 0x00000000, 0x00000210, 0x00000000,
    0x00000214, 0x00000000, 0x00000218, 0x00000000,
    0x0000021C, 0x00000000, 0x00000220, 0x00000000,
    0x00000224, 0x00000000, 0x00000228, 0x00000000,
    0x0000022C, 0x00000000, 0x00000230, 0x00000000,
    0x00000234, 0x00000000, 0x00000238, 0x00000000,
    0x0000023C, 0x00000000, 0x00000240, 0x00000000,
    0x00000244, 0x00000000, 0x00000248, 0x00000000,
    0x0000024C, 0x00000000, 0x00000250, 0x00000000,
    0x00000254, 0x00000000, 0x00000258, 0x00000000,
    0x0000025C, 0x00000000, 0x00000260, 0x00000000,
    0x00000264, 0x00000000, 0x00000268, 0x00000000,
    0x0000026C, 0x00000000, 0x00000270, 0x00000000,
    0x00000274, 0x00000000, 0x00000278, 0x00000000,
    0x0000027C, 0x00000000, 0x00000280, 0x00000000,
    0x00000284, 0x00000000, 0x00000288, 0x00000000,
    0x0000028C, 0x00000000, 0x00000290, 0x00000000,
    0x00000294, 0x00000000, 0x00000298, 0x00000000,
    0x0000029C, 0x00000000, 0x000002A0, 0x00000000,
    0x000002A4, 0x00000000, 0x000002A8, 0x00000000,
    0x000002AC, 0x00000000, 0x000002B0, 0x00000000,
    0x000002B4, 0x00000000, 0x000002B8, 0x00000000,
    0x000002BC, 0x00000000, 0x000002C0, 0x00000000,
    0x000002C4, 0x00000000, 0x000002C8, 0x00000000,
    0x000002CC, 0x00000000, 0x000002D0, 0x00000000,
    0x000002D4, 0x00000000, 0x000002D8, 0x00000000,
    0x000002DC, 0x00000000, 0x000002E0, 0x00000000,
    0x000002E4, 0x00000000, 0x000002E8, 0x00000000,
    0x000002EC, 0x00000000, 0x000002F0, 0x00000000,
    0x000002F4, 0x00000000, 0x000002F8, 0x00000000,
    0x000002FC, 0x00000000, 0x00000300, 0x00000000,
    0x00000304, 0x00000000, 0x00000308, 0x00000000,
    0x0000030C, 0x00000000, 0x00000310, 0x00000000,
    0x00000314, 0x00000000, 0x00000318, 0x00000000,
    0x0000031C, 0x00000000, 0x00000320, 0x00000000,
    0x00000324, 0x00000000, 0x00000328, 0x00000000,
    0x0000032C, 0x00000000, 0x00000330, 0x00000000,
    0x00000334, 0x00000000, 0x00000338, 0x00000000,
    0x0000033C, 0x00000000, 0x00000340, 0x00040000,
    0x00000344, 0x00000000, 0x00000348, 0x00000000,
    0x0000034C, 0x00000000, 0x00000350, 0x55555555,
    0x00000354, 0x55555555, 0x00000358, 0x55555555,
    0x0000035C, 0x55555555, 0x00000360, 0x00000000,
    0x00000364, 0x00000000, 0x00000368, 0x00000000,
    0x0000036C, 0x00000000, 0x00000370, 0x00000000,
    0x00000374, 0x00000000, 0x00000378, 0x00000000,
    0x0000037C, 0x00000000, 0x00000380, 0x00000000,
    0x00000384, 0x00000000, 0x00000388, 0x00000008,
    0x0000038C, 0x00000000, 0x00000390, 0x00000000,
    0x00000394, 0x00000000, 0x00000398, 0x00000000,
    0x0000039C, 0x00001010
};

// 
static S32 data2[] = {
    0x000003C0, 0x00000111, 0x000003C4, 0x00000111,
    0x000003C8, 0x00000111, 0x000003CC, 0x00000111,
    0x000003D0, 0x00000111, 0x000003D4, 0x00000111,
    0x000003D8, 0x00000111, 0x000003DC, 0x00000111,
    0x000003E0, 0x00000111, 0x000003E4, 0x00000111,
    0x000003E8, 0x00000111, 0x000003EC, 0x00000111,
    0x000003F0, 0x00000111, 0x000003F4, 0x00000111,
    0x000003F8, 0x00000111, 0x000003FC, 0x00000111,
    0x00000400, 0x00000000, 0x00000404, 0x00000000,
    0x00000408, 0x00000000, 0x0000040C, 0x00000000,
    0x00000410, 0x00000000, 0x00000414, 0x00000000,
    0x00000418, 0x00000000, 0x0000041C, 0x00000000,
    0x00000420, 0x00000000, 0x00000424, 0x00000000,
    0x00000428, 0x00000000, 0x0000042C, 0x00000000,
    0x00000430, 0x00000000, 0x00000434, 0x00000000,
    0x00000438, 0x00000000, 0x0000043C, 0x00000000,
    0x00000440, 0x00000000, 0x00000444, 0x00000000,
    0x00000448, 0x00000000, 0x0000044C, 0x00000000,
    0x00000450, 0x00000000, 0x00000454, 0x00000111,
    0x00000458, 0x00080060, 0x0000045C, 0x00000000,
    0x00000460, 0x00000000, 0x00000464, 0x00000000,
    0x00000468, 0x00000000, 0x0000046C, 0x00000000,
    0x00000470, 0x00000000, 0x00000474, 0x00000080,
    0x00000478, 0xFFFF0000, 0x0000047C, 0x00000001,
    0x00000480, 0x00000000, 0x00000484, 0x00000000,
    0x00000488, 0x00000000, 0x0000048C, 0x00000000,
    0x00000490, 0x46400000, 0x00000494, 0x00000000,
    0x00000498, 0x00000000, 0x0000049C, 0x00000000,
    0x000004A0, 0xFFFF0000, 0x000004A4, 0x88888888,
    0x000004A8, 0x88888888, 0x000004AC, 0x88888888,
    0x000004B0, 0x88888888, 0x000004B4, 0x88888888,
    0x000004B8, 0x88888888, 0x000004BC, 0x88888888,
    0x000004C0, 0x88888888, 0x000004C4, 0x88888888,
    0x000004C8, 0x88888888, 0x000004CC, 0x88888888,
    0x000004D0, 0x88888888, 0x000004D4, 0x88888888,
    0x000004D8, 0x88888888, 0x000004DC, 0x88888888,
    0x000004E0, 0x88888888, 0x000004E4, 0x00000000,
    0x000004E8, 0x00000000, 0x000004EC, 0x00000000,
    0x000004F0, 0x00000000, 0x000004F4, 0x0FFF0000,
    0x000004F8, 0x0FFF0000, 0x000004FC, 0x00000000,
    0x00000500, 0x00011100, 0x00000504, 0x00000000,
    0x00000508, 0x00000000, 0x0000050C, 0x00000000,
    0x00000510, 0x00000000, 0x00000514, 0x00000000,
    0x00000518, 0x00000000, 0x0000051C, 0x07FF0000,
    0x00000520, 0x07FF0000, 0x00000524, 0x07FF0000,
    0x00000528, 0x07FF0000, 0x0000052C, 0x07FF0000,
    0x00000530, 0x07FF0000, 0x00000534, 0x07FF0000,
    0x00000538, 0x07FF0000, 0x0000053C, 0x07FF0000,
    0x00000540, 0x07FF0000, 0x00000544, 0x07FF0000,
    0x00000548, 0x07FF0000, 0x0000054C, 0x07FF0000,
    0x00000550, 0x07FF0000, 0x00000554, 0x07FF0000,
    0x00000558, 0x07FF0000, 0x0000055C, 0x00000000,
    0x00000560, 0x00000000, 0x00000564, 0x4B7FFFFF,
    0x00000568, 0x00000000, 0x0000056C, 0x00000000,
    0x00000570, 0x00000000, 0x00000574, 0x00000000,
    0x00000578, 0x00000000, 0x0000057C, 0x00000000,
    0x00000580, 0x00000000, 0x00000584, 0x00000000,
    0x00000588, 0x00000000, 0x0000058C, 0x30201000,
    0x00000590, 0x70605040, 0x00000594, 0xB8A89888,
    0x00000598, 0xF8E8D8C8, 0x0000059C, 0x00000000,
    0x000005A0, 0x00000000, 0x000005A4, 0x00000000,
    0x000005A8, 0x00000000, 0x000005AC, 0x40100000,
    0x000005B0, 0x00000000, 0x000005B4, 0x00000000,
    0x000005B8, 0x00000000, 0x000005BC, 0x00000000,
    0x000005C0, 0x00000000, 0x000005C4, 0x00000000,
    0x000005C8, 0x0000FFFF, 0x000005CC, 0x00000000,
    0x000005D0, 0x00000000, 0x000005D4, 0x00000000,
    0x000005D8, 0x00000000, 0x000005DC, 0x00000000,
    0x000005E0, 0x00000000, 0x000005E4, 0x00000000,
    0x000005E8, 0x00000000, 0x000005EC, 0x00000000,
    0x000005F0, 0x00000000, 0x000005F4, 0x00000000,
    0x000005F8, 0x00000000, 0x000005FC, 0x435185D6,
    0x00000600, 0x2155B699, 0x00000604, 0xFEDCBA98,
    0x00000608, 0x00000098, 0x0000060C, 0x00000000,
    0x00000610, 0x00000000, 0x00000614, 0x00000000,
    0x00000618, 0xFFFFFFFF, 0x0000061C, 0x00FF7000,
    0x00000620, 0x0000FFFF, 0x00000624, 0x00000000,
    0x00000628, 0x00000000, 0x0000062C, 0x00000000,
    0x00000630, 0x00FF0000, 0x00000634, 0x00000000,
    0x00000638, 0x00000000, 0x0000063C, 0x00000000,
    0x00000640, 0x00000000, 0x00000644, 0x00000000,
    0x00000648, 0x00000000, 0x0000064C, 0x00000000,
    0x00000650, 0x00000000, 0x00000654, 0x00000000,
    0x00000658, 0x00000000, 0x0000065C, 0x00000000,
    0x00000660, 0x00000000, 0x00000664, 0x00000000,
    0x00000668, 0x00000000, 0x0000066C, 0x00FFFF00,
    0x00000670, 0x00000000, 0x00000674, 0x00000000,
    0x00000678, 0x00000000, 0x0000067C, 0x00000000,
    0x00000680, 0x00000000, 0x00000684, 0x00000000,
    0x00000688, 0x00000000, 0x0000068C, 0x00000000,
    0x00000690, 0x00000000, 0x00000694, 0x00000000,
    0x00000698, 0x00000000, 0x0000069C, 0x00000000,
    0x000006A0, 0x00000000, 0x000006A4, 0x00000000,
    0x000006A8, 0x00000000, 0x000006AC, 0x00000000,
    0x000006B0, 0x00018488, 0x000006B4, 0x00018488,
    0x000006B8, 0x00018488, 0x000006BC, 0x00018488,
    0x000006C0, 0x00018488, 0x000006C4, 0x00018488,
    0x000006C8, 0x00018488, 0x000006CC, 0x00018488,
    0x000006D0, 0x00018488, 0x000006D4, 0x00018488,
    0x000006D8, 0x00018488, 0x000006DC, 0x00018488,
    0x000006E0, 0x00018488, 0x000006E4, 0x00018488,
    0x000006E8, 0x00018488, 0x000006EC, 0x00018488,
    0x000006F0, 0x00028202, 0x000006F4, 0x00028202,
    0x000006F8, 0x00028202, 0x000006FC, 0x00028202,
    0x00000700, 0x00028202, 0x00000704, 0x00028202,
    0x00000708, 0x00028202, 0x0000070C, 0x00028202,
    0x00000710, 0x00028202, 0x00000714, 0x00028202,
    0x00000718, 0x00028202, 0x0000071C, 0x00028202,
    0x00000720, 0x00028202, 0x00000724, 0x00028202,
    0x00000728, 0x00028202, 0x0000072C, 0x00028202,
    0x00000730, 0x00000000, 0x00000734, 0x00000000,
    0x00000738, 0x00000000, 0x0000073C, 0x00000000,
    0x00000740, 0x00000000, 0x00000744, 0x00000000,
    0x00000748, 0x00000000, 0x0000074C, 0x00000000,
    0x00000750, 0x00000000, 0x00000754, 0x00000000,
    0x00000758, 0x00000000, 0x0000075C, 0x00000000,
    0x00000760, 0x00000000, 0x00000764, 0x00000000,
    0x00000768, 0x00000000, 0x0000076C, 0x00000000,
    0x00000770, 0x0000AAE4, 0x00000774, 0x0000AAE4,
    0x00000778, 0x0000AAE4, 0x0000077C, 0x0000AAE4,
    0x00000780, 0x0000AAE4, 0x00000784, 0x0000AAE4,
    0x00000788, 0x0000AAE4, 0x0000078C, 0x0000AAE4,
    0x00000790, 0x0000AAE4, 0x00000794, 0x0000AAE4,
    0x00000798, 0x0000AAE4, 0x0000079C, 0x0000AAE4,
    0x000007A0, 0x0000AAE4, 0x000007A4, 0x0000AAE4,
    0x000007A8, 0x0000AAE4, 0x000007AC, 0x0000AAE4,
    0x000007B0, 0x01012000, 0x000007B4, 0x01012000,
    0x000007B8, 0x01012000, 0x000007BC, 0x01012000,
    0x000007C0, 0x01012000, 0x000007C4, 0x01012000,
    0x000007C8, 0x01012000, 0x000007CC, 0x01012000,
    0x000007D0, 0x01012000, 0x000007D4, 0x01012000,
    0x000007D8, 0x01012000, 0x000007DC, 0x01012000,
    0x000007E0, 0x01012000, 0x000007E4, 0x01012000,
    0x000007E8, 0x01012000, 0x000007EC, 0x01012000,
    0x000007F0, 0x00080008, 0x000007F4, 0x00080008,
    0x000007F8, 0x00080008, 0x000007FC, 0x00080008,
    0x00000800, 0x00080008, 0x00000804, 0x00080008,
    0x00000808, 0x00080008, 0x0000080C, 0x00080008,
    0x00000810, 0x00080008, 0x00000814, 0x00080008,
    0x00000818, 0x00080008, 0x0000081C, 0x00080008,
    0x00000820, 0x00080008, 0x00000824, 0x00080008,
    0x00000828, 0x00080008, 0x0000082C, 0x00080008,
    0x00000830, 0x00000000, 0x00000834, 0x00000000,
    0x00000838, 0x00000000, 0x0000083C, 0x00000000,
    0x00000840, 0x00000000, 0x00000844, 0x00000000,
    0x00000848, 0x00000000, 0x0000084C, 0x00000000,
    0x00000850, 0x00000000, 0x00000854, 0x00000000,
    0x00000858, 0x00000000, 0x0000085C, 0x00000000,
    0x00000860, 0x00000000, 0x00000864, 0x00000000,
    0x00000868, 0x00000000, 0x0000086C, 0x00000000,
    0x00000870, 0x00100008, 0x00000874, 0x00100008,
    0x00000878, 0x00100008, 0x0000087C, 0x00100008,
    0x00000880, 0x00100008, 0x00000884, 0x00100008,
    0x00000888, 0x00100008, 0x0000088C, 0x00100008,
    0x00000890, 0x00100008, 0x00000894, 0x00100008,
    0x00000898, 0x00100008, 0x0000089C, 0x00100008,
    0x000008A0, 0x00100008, 0x000008A4, 0x00100008,
    0x000008A8, 0x00100008, 0x000008AC, 0x00100008,
    0x000008B0, 0x00000000, 0x000008B4, 0x00000000,
    0x000008B8, 0x00000000, 0x000008BC, 0x00000000,
    0x000008C0, 0x00000000, 0x000008C4, 0x00000000,
    0x000008C8, 0x00000000, 0x000008CC, 0x00000000,
    0x000008D0, 0x00000000, 0x000008D4, 0x00000000,
    0x000008D8, 0x00000000, 0x000008DC, 0x00000000,
    0x000008E0, 0x00000000, 0x000008E4, 0x00000000,
    0x000008E8, 0x00000000, 0x000008EC, 0x00000000,
    0x000008F0, 0x00000000, 0x000008F4, 0x00000000,
    0x000008F8, 0x00000000, 0x000008FC, 0x00000000,
    0x00000900, 0x0001BC80, 0x00000904, 0x0001BC80,
    0x00000908, 0x0001BC80, 0x0000090C, 0x0001BC80,
    0x00000910, 0x00000202, 0x00000914, 0x00000202,
    0x00000918, 0x00000202, 0x0000091C, 0x00000202,
    0x00000920, 0x00000000, 0x00000924, 0x00000000,
    0x00000928, 0x00000000, 0x0000092C, 0x00000000,
    0x00000930, 0x00000008, 0x00000934, 0x00000008,
    0x00000938, 0x00000008, 0x0000093C, 0x00000008,
    0x00000940, 0x00000000, 0x00000944, 0x00000000,
    0x00000948, 0x00000000, 0x0000094C, 0x00000000,
    0x00000950, 0x00080008, 0x00000954, 0x00080008,
    0x00000958, 0x00080008, 0x0000095C, 0x00080008,
    0x00000960, 0x00000000, 0x00000964, 0x00000000,
    0x00000968, 0x00000000, 0x0000096C, 0x00000000,
    0x00000970, 0x00000002, 0x00000974, 0x00000000,
    0x00000978, 0x00000000, 0x0000097C, 0x00000000
};

// 
static S32 data3[] = {
    0x0000009A0, 0x00000000, 0x000009A4, 0x00000020,
    0x0000009A8, 0x28818408, 0x000009AC, 0x00000000,
    0x0000009B0, 0x00000000, 0x000009B4, 0x3E020200,
    0x0000009B8, 0x00FFFFFF, 0x000009BC, 0x0C103F00,
    0x0000009C0, 0x00000000, 0x000009C4, 0x00000000,
    0x0000009C8, 0x00040000, 0x000009CC, 0x00000000,
    0x0000009D0, 0x00000000, 0x000009D4, 0x00000000,
    0x0000009D8, 0x00000000, 0x000009DC, 0x00000000,
    0x0000009E0, 0x00000000, 0x000009E4, 0x00000000,
    0x0000009E8, 0x00000000, 0x000009EC, 0x00000000,
    0x0000009F0, 0x00000000, 0x000009F4, 0x00000000,
    0x0000009F8, 0x00000000, 0x000009FC, 0x00000000,
    0x000000A00, 0x00008100, 0x00000A04, 0x00000000,
    0x000000A08, 0x00000000, 0x00000A0C, 0x00000000,
    0x000000A10, 0x00000000, 0x00000A14, 0x00000000,
    0x000000A18, 0x00000000, 0x00000A1C, 0x00000000,
    0x000000A20, 0x00000000, 0x00000A24, 0x00000000,
    0x000000A28, 0x00000000, 0x00000A2C, 0x00000000,
    0x000000A30, 0x00000000, 0x00000A34, 0x00000000,
    0x000000A38, 0x00000000, 0x00000A3C, 0x00000000,
    0x000000A40, 0x00000000, 0x00000A44, 0x00000000,
    0x000000A48, 0x00000000, 0x00000A4C, 0x00000000,
    0x000000A50, 0x00000000, 0x00000A54, 0x00000000,
    0x000000A58, 0x00000000, 0x00000A5C, 0x00000000,
    0x000000A60, 0x00000000, 0x00000A64, 0x00000000,
    0x000000A68, 0x00000000, 0x00000A6C, 0x00000000,
    0x000000A70, 0x00000000, 0x00000A74, 0x00000000,
    0x000000A78, 0x00000000, 0x00000A7C, 0x00000000,
    0x000000A80, 0x00000000, 0x00000A84, 0x00000000,
    0x000000A88, 0x00000000, 0x00000A8C, 0x00000001,
    0x000000A90, 0x00000000, 0x00000A94, 0x00000000,
    0x000000A98, 0x00000000, 0x00000A9C, 0x00000000,
    0x000000AA0, 0x00000000, 0x00000AA4, 0x00000000,
    0x000000AA8, 0x00000000, 0x00000AAC, 0x00000000,
    0x000000AB0, 0x00000000, 0x00000AB4, 0x00000000,
    0x000000AB8, 0x00000000, 0x00000ABC, 0x00000000,
    0x000000AC0, 0x00000000, 0x00000AC4, 0x00000000,
    0x000000AC8, 0x00000000, 0x00000ACC, 0x00000000,
    0x000000AD0, 0x00000000, 0x00000AD4, 0x00000000,
    0x000000AD8, 0x00002001, 0x00000ADC, 0x00000000,
    0x000000AE0, 0x00000000, 0x00000AE4, 0x00000003,
    0x000000AE8, 0x00011101, 0x00000AEC, 0x00000000,
    0x000000AF0, 0x00000000, 0x00000AF4, 0x00000000,
    0x000000AF8, 0x00000000, 0x00000AFC, 0x00000000,
    0x000000B00, 0x00000000, 0x00000B04, 0x00000000,
    0x000000B08, 0x00000000, 0x00000B0C, 0x00000000,
    0x000000B10, 0x00000000, 0x00000B14, 0x00000000,
    0x000000B18, 0x00000000, 0x00000B1C, 0x00000000,
    0x000000B20, 0xFFFFFFFF, 0x00000B24, 0xFFFFFFFF,
    0x000000B28, 0xFFFFFFFF, 0x00000B2C, 0xFFFFFFFF,
    0x000000B30, 0xFFFFFFFF, 0x00000B34, 0xFFFFFFFF,
    0x000000B38, 0xFFFFFFFF, 0x00000B3C, 0xFFFFFFFF,
    0x000000B40, 0xFFFFFFFF, 0x00000B44, 0xFFFFFFFF,
    0x000000B48, 0xFFFFFFFF, 0x00000B4C, 0xFFFFFFFF,
    0x000000B50, 0xFFFFFFFF, 0x00000B54, 0xFFFFFFFF,
    0x000000B58, 0xFFFFFFFF, 0x00000B5C, 0xFFFFFFFF,
    0x000000B60, 0xFFFFFFFF, 0x00000B64, 0xFFFFFFFF,
    0x000000B68, 0xFFFFFFFF, 0x00000B6C, 0xFFFFFFFF,
    0x000000B70, 0xFFFFFFFF, 0x00000B74, 0xFFFFFFFF,
    0x000000B78, 0xFFFFFFFF, 0x00000B7C, 0xFFFFFFFF,
    0x000000B80, 0xFFFFFFFF, 0x00000B84, 0xFFFFFFFF,
    0x000000B88, 0xFFFFFFFF, 0x00000B8C, 0xFFFFFFFF,
    0x000000B90, 0xFFFFFFFF, 0x00000B94, 0xFFFFFFFF,
    0x000000B98, 0xFFFFFFFF, 0x00000B9C, 0xFFFFFFFF,
    0x000000BA0, 0xFFFFFFFF, 0x00000BA4, 0xFFFFFFFF,
    0x000000BA8, 0xFFFFFFFF, 0x00000BAC, 0xFFFFFFFF,
    0x000000BB0, 0x00000000, 0x00000BB4, 0x00000000,
    0x000000BB8, 0x00000000, 0x00000BBC, 0x00000000,
    0x000000BC0, 0x00000000, 0x00000BC4, 0x00000000,
    0x000000BC8, 0x00000000, 0x00000BCC, 0x00000000,
    0x000000BD0, 0x00000000, 0x00000BD4, 0x00000005,
    0x000000BD8, 0x00000000, 0x00000BDC, 0x00000000,
    0x000000BE0, 0x0000FFFF, 0x00000BE4, 0x00000000,
    0x000000BE8, 0x00000000, 0x00000BEC, 0x00000000,
    0x000000BF0, 0x00000000, 0x00000BF4, 0x00000000,
    0x000000BF8, 0x00000000, 0x00000BFC, 0x00005555,
    0x000000C00, 0x00005555, 0x00000C04, 0x00005555,
    0x000000C08, 0x00005555, 0x00000C0C, 0x00005555,
    0x000000C10, 0x00005555, 0x00000C14, 0x00005555,
    0x000000C18, 0x00005555, 0x00000C1C, 0x00005555,
    0x000000C20, 0x00000001, 0x00000C24, 0x00000000,
    0x000000C28, 0x00000000, 0x00000C2C, 0x00000000,
    0x000000C30, 0x00000000, 0x00000C34, 0x00000000,
    0x000000C38, 0x00000000, 0x00000C3C, 0x00000000,
    0x000000C40, 0x00000000, 0x00000C44, 0x00000000,
    0x000000C48, 0x00000000, 0x00000C4C, 0x00000000,
    0x000000C50, 0x00000000, 0x00000C54, 0x00000000,
    0x000000C58, 0x00000000, 0x00000C5C, 0x08E00001
};

// 
static S32 data4[] = {
    0x00000100, 0x00000320, 0x00000400, 0x00000420,
    0x00000100, 0x00000820, 0x00000020, 0x00000920,
    0x00000020, 0x00000940, 0x00000020, 0x00000960,
    0x00000020, 0x00000980, 0x000001C8, 0x000009A0,
    0x00000010, 0x00000B68, 0x00000010, 0x00000B78,
    0x00000010, 0x00000B88, 0x00000010, 0x00000B98,
    0x00000020, 0x00000BA8, 0x00000020, 0x00000BC8,
    0x00000020, 0x00000BE8, 0x00000020, 0x00000C08,
    0x00000750, 0x00000C28, 0x00000880, 0x00001378,
    0x00000100, 0x00001BF8, 0x00000100, 0x00001CF8,
    0x00000080, 0x00001DF8, 0x00000010, 0x00001E78,
    0x00000020, 0x00001E88, 0x00000010, 0x00001EA8,
    0x00000750, 0x00001EB8, 0x00000880, 0x00002608,
    0x00000100, 0x00002E88, 0x00000100, 0x00002F88,
    0x00000080, 0x00003088, 0x00000010, 0x00003108,
    0x00000020, 0x00003118, 0x00000010, 0x00003138,
    0x00000750, 0x00003148, 0x00000880, 0x00003898,
    0x00000100, 0x00004118, 0x00000100, 0x00004218,
    0x00000080, 0x00004318, 0x00000010, 0x00004398,
    0x00000020, 0x000043A8, 0x00000010, 0x000043C8,
    0x00000750, 0x000043D8, 0x00000880, 0x00004B28,
    0x00000100, 0x000053A8, 0x00000100, 0x000054A8,
    0x00000080, 0x000055A8, 0x00000010, 0x00005628,
    0x00000020, 0x00005638, 0x00000010, 0x00005658,
    0x00000750, 0x00005668, 0x00000880, 0x00005DB8,
    0x00000100, 0x00006638, 0x00000100, 0x00006738,
    0x00000080, 0x00006838, 0x00000010, 0x000068B8,
    0x00000020, 0x000068C8, 0x00000010, 0x000068E8,
    0x00000750, 0x000068F8, 0x00000880, 0x00007048,
    0x00000100, 0x000078C8, 0x00000100, 0x000079C8,
    0x00000080, 0x00007AC8, 0x00000010, 0x00007B48,
    0x00000020, 0x00007B58, 0x00000010, 0x00007B78,
    0x00000750, 0x00007B88, 0x00000880, 0x000082D8,
    0x00000100, 0x00008B58, 0x00000100, 0x00008C58,
    0x00000080, 0x00008D58, 0x00000010, 0x00008DD8,
    0x00000020, 0x00008DE8, 0x00000010, 0x00008E08,
    0x00000750, 0x00008E18, 0x00000880, 0x00009568,
    0x00000100, 0x00009DE8, 0x00000100, 0x00009EE8,
    0x00000080, 0x00009FE8, 0x00000010, 0x0000A068,
    0x00000020, 0x0000A078, 0x00000010, 0x0000A098,
    0x00000750, 0x0000A0A8, 0x00000880, 0x0000A7F8,
    0x00000100, 0x0000B078, 0x00000100, 0x0000B178,
    0x00000080, 0x0000B278, 0x00000010, 0x0000B2F8,
    0x00000020, 0x0000B308, 0x00000010, 0x0000B328
};


S64 rsx_device_graph_t::get_graph_channel_address_by_id(S32 channel_id) {
    RSX_ASSERT(channel_id < max_channels);
    return channel_addr[channel_id];
}

S32 rsx_device_graph_t::sub21D224(S32 arg1) {
    S32 flag;
    if (arg1 == 0) {
        unk_194 -= 1;
        if (unk_194 != 0) {
            return value;
        }
        flag = 0;
    }
    else {
        unk_194 += 1;
        if (unk_194 == 0) {
            return 0;
        }
        flag = 1;
    }
    
    for (S32 i = 0; i < 4; i++) {
        S32 value = rsx_rd32(RSX_PGRAPH_UNK7570(i));
        value &= 0xF7FFFFFF;               // unset value[04:04]
        value |= (flag << 27);              // if: 1(set value[04:04]) 0(unset value[04:04])
        rsx_wr32(RSX_PGRAPH_UNK7570(i), value);
    }
    return unk_194;
}

/***********************************************************************
* pause ?
***********************************************************************/
void rsx_device_graph_21D054(rsx_device_graph_t* graph) {
    S32 i, value1, value2;

    value1 = rsx_rd32(0x28000400760);
    value1 = (value1 & 0xFFFFFF0F) >>4;              // get value[24:27]
    value2 = rsx_rd32(0x28000400760);
    value2 &= 0xF;                                   // get value[28:31]
  
    if (value1 != value2) {
        for (i = 0; i < 100001; i++) {
            // db16cyc
            // db16cyc
            // db16cyc
            // db16cyc
            // eieio
            value1 = rsx_rd32(0x28000400760);
            value1 = (value1 & 0xFFFFFF0F) >>4;           // get value[24:27]
            value2 = rsx_rd32(0x28000400760);
            value2 &= 0xF;                                // get value[28:31]
      
            if (value1 == value2) {
                break;
            }
        }
    }
  
    value1 = rsx_rd32(0x28000400764);
    value1 &= 0x8000000;                              // get value[04:04]
    
    if (value1 != 0) {
        for (i = 0; i < 100001; i++) {
            // db16cyc
            // db16cyc
            // db16cyc
            // db16cyc
            // eieio
            value1 = rsx_rd32(0x28000400764);
            value1 &= 0x8000000;                          // get value[04:04]
            
            if (value1 == 0) {
                break;
            }
        }
    }
    
    value1 = rsx_rd32(RSX_PGRAPH_STATUS);
    value2 = rsx_rd32(0x28000400300);
    
    if (value1 != value2) {
        for (i = 0; i < 100001; i++) {
            // db16cyc
            // db16cyc
            // db16cyc
            // db16cyc
            // eieio
            value1 = rsx_rd32(RSX_PGRAPH_STATUS);
            value2 = rsx_rd32(0x28000400300);
      
            if (value1 != value2) {
                break;
            }
        }
    }
    
    return;
}

/***********************************************************************
* 
***********************************************************************/
void rsx_device_graph_21D038(rsx_device_graph_t* graph) {
    rsx_wr32(0, 0x2800040013C);   // on ?
    return; 
}

/***********************************************************************
* 
***********************************************************************/
void rsx_device_graph_21D01C(rsx_device_graph_t* graph) {
    rsx_wr32(-1, 0x2800040013C);  // off ?
    return;
}

/***********************************************************************
* 
***********************************************************************/
void rsx_device_graph_21E9CC(S64 *vtab) {
    S32 i, value = 0, chip_revision;
    rsx_core_device_t* core = NULL;
    rsx_bus_ioif0_t* ioif0 = NULL;

    // Get device core
    core = rsx_core_device_get_core_object_by_id(g_rsx_core_id);
    RSX_ASSERT(core);
    
    // Get chip revision from IOIF0 object
    ioif0 = core->ioif0;
    chip_revision = ioif0->get_chip_revision();
    
/*
srawi     r9, r3, 31
xor       r0, r9, r3
subf      r0, r0, r9
srawi     r0, r0, 31
rlwinm    r11, r0, 0,6,7
addis     r11, r11, -0x7FD8
addi      r11, r11, 0xFFF
*/
    
    rsx_wr32(0x401087C0, RSX_PGRAPH_DEBUG_1);
    rsx_wr32(0xE1DA8055, RSX_PGRAPH_DEBUG_3);
    rsx_wr32(0x00008000, RSX_PGRAPH_DEBUG_4);
    rsx_wr32(0x00BE3C5F, 0x28000400610);
    rsx_wr32(0x00000000, 0x280004000B0);
    rsx_wr32(0x00000006, 0x280004000C0);
    
    //store result(r11) chip_revision on 0x28000400820
    rsx_wr32(chip_revision, 0x28000400820);
    
    rsx_wr32(0x28000400824, 0x000000A0);
    rsx_wr32(0x28000400828, 0x07830610);
    rsx_wr32(0x28000400B30, 0x080A0080);
    rsx_wr32(0x28000400B34, 0x00000400);
    rsx_wr32(0x28000400B38, 0x2FFFF800);
    rsx_wr32(0x28000400B3C, 0x00064000);
    rsx_wr32(0x28000400310, 0x00000000);
    rsx_wr32(0x2800040031C, 0x00000000);
    rsx_wr32(0x28000403810, 0x00000308);
    rsx_wr32(0x28000403C10, 0x00000000);
    rsx_wr32(0x28000403C14, 0x00000000);
    rsx_wr32(0x28000406800, 0x00000330);
    rsx_wr32(0x28000406804, 0x00000000);
    rsx_wr32(0x28000406808, 0x00000001);
    rsx_wr32(0x2800040680C, 0x0001FFFF);
    rsx_wr32(0x28000406810, 0x00000304);
    rsx_wr32(0x28000406880, 0x7FFFFFFF);
    rsx_wr32(0x28000406884, 0x0000FF00);
    rsx_wr32(0x28000405010, 0x00000000);
    rsx_wr32(0x28000405014, 0xFF200001);
    rsx_wr32(0x28000405020, 0x00000000);
  
    value = rsx_rd32(0x28000405010);
    value &= 0xFFF003FF;                      // unset value[12:21]
    value |= 0x70000;                         // set value[13:15]
    rsx_wr32(value, 0x28000405010);
    
    value = rsx_rd32(0x28000405010);
    value &= 0xFFF003FF;                      // unset value[12:21]
    value |= 0x38800;                         // set value[14:16], [20:20]
    rsx_wr32(value, 0x28000405010);
    
    value = rsx_rd32(0x28000405020);
    value &= 0xFFFFFC00;                      // unset value[22:31]
    value |= 0x38800;                         // set value[25:26], [28:29], [31:31]
    rsx_wr32(value, 0x28000405020);
    
    for (i = 0; i < 8; i++)
        rsx_wr32(0, 0x28000407530 + i * 0x10);
  
    for (i = 0; i < 8; i++)
        rsx_wr32(0, 0x28000407534 + i * 0x10);
    
    for (i = 0; i < 4; i++)
        rsx_wr32(RSX_PGRAPH_UNK7570(i), 0x77AF818);
    
    for (i = 0; i < 4; i++)
        rsx_wr32(0, 0x28000407800 + i * 8);
    
    for (i = 0; i < 8; i++)
        rsx_wr32(0, 0x28000407C04 + i * 0x40);
    
    for (i = 0; i < 8; i++)
        rsx_wr32(1, 0x28000407C08 + i * 0x40);
    
    for (i = 0; i < 8; i++)
        rsx_wr32(0xE3000, 0x28000405C24 + i * 0x80);
  
    rsx_wr32(0, 0x28000408000);
    rsx_wr32(0, 0x28000408004);
}


/***********************************************************************
* 
***********************************************************************/
void rsx_device_graph_21D2DC(rsx_device_graph_t* graph) {
    rsx_device_graph_21E9CC(NULL);
    return;
}


/***********************************************************************
* 
***********************************************************************/
void rsx_device_graph_21D350(rsx_device_graph_t* graph) {
    S32 i, value1 = 0, value2 = 0, offset = 0;
    
    
    // 
    value1 = rsx_rd32(0x28000000200);
    value1 &= 0xFFFFFE00;                 // unset value[19:19]
    rsx_wr32(value1, 0x28000000200);
    
    value1 = rsx_rd32(0x28000000200);
    value1 |= 0x1000;                     // set value[19:19]
    rsx_wr32(value1, 0x28000000200);
    
    value1 = rsx_rd32(0x28000400080);
    value1 &= 0xFFFFFFFE;                 // unset value[31:31]
    rsx_wr32(value1, 0x28000400080);
    
    // 
    rsx_device_graph_21D2DC(graph);
    
    // 
    for (i = 0; i < 15; i++) {
        rsx_wr32(RSX_PFB_TLIMIT(i), 0);
        rsx_wr32(RSX_PGRAPH_TLIMIT(i), 0);
        rsx_wr32(0x28000406904 + offset, 0);
        rsx_wr32(RSX_PFB_TSIZE(i), 0);
        rsx_wr32(RSX_PGRAPH_TSIZE(i), 0);
        rsx_wr32(0x28000406908 + offset, 0);
        rsx_wr32(RSX_PFB_TILE(i), 0);
        rsx_wr32(RSX_PGRAPH_TILE(i), 0);
        rsx_wr32(0x28000406900 + offset, 0);
        
        value1 = rsx_rd32(RSX_PFB_TILE(i));
        value2 = rsx_rd32(RSX_PGRAPH_TILE(i));
        RSX_ASSERT(value1 == value2);

        value1 = rsx_rd32(RSX_PFB_TLIMIT(i));
        value2 = rsx_rd32(RSX_PGRAPH_TLIMIT(i));
        RSX_ASSERT(value1 == value2);
            
        value1 = rsx_rd32(RSX_PFB_TSIZE(i));
        value2 = rsx_rd32(RSX_PGRAPH_TSIZE(i));
        RSX_ASSERT(value1 == value2);

        offset += 0x10;
    }
    
    value1 = rsx_rd32(0x28000100200);
    rsx_wr32(value1, 0x28000400DF0);
    rsx_wr32(value1, 0x280004069F0);
    
    value1 = rsx_rd32(0x28000100204);
    rsx_wr32(value1, 0x28000400DF4);
    rsx_wr32(value1, 0x280004069F4);
    
    for (i = 0; i < 8; i++) {
        offset = 0;
        
        value1 = rsx_rd32(offset + 0x28000400620);
        value1 &= 0xFFFFFFFE;                         // unset value1[31:31]
        rsx_wr32(value1, offset + 0x28000400620);
        
        offset+=0x1C;
    }
    
    for (i = 0; i < 8; i++) {
        offset = 0;
        
        value1 = rsx_rd32(offset + 0x28000400634);
        value1 &= 0xFFFFFFFE;                         // unset value1[31:31]
        rsx_wr32(value1, offset + 0x28000400634);
        
        offset+=0x1C;
    }
    
    value1 = rsx_rd32(0x28000001540);
    value2 = value1 & 0xFFFFFF00;
    
    for (i = 0; i < 8; i++) {
        ////////////////////////////////////////////////////////////////////
    // HERE EXECUTION BREAKS !!! no diffs, if not taken, for run into error
    ////////////////////////////////////////////////////////////////////
    //printf("value1(0x%08X) value2(0x%08X)\n", value1, value2);
    
        if ((((S32)1 <<i) & value2) != 0) {
            rsx_wr32(0, 0x28000405000);
            
            i &= 0xFFFFFFFC;
            
            value1 = rsx_rd32(0x28000405000);
            value1 &= 0xFFFFFFF8;               // unset [29:31]
            rsx_wr32(value1, 0x28000405000);
            
            rsx_wr32(RSX_PGRAPH_CTX_USER, 0);
            rsx_wr32(RSX_PGRAPH_CTX_SWITCH(0), 0);
            rsx_wr32(RSX_PGRAPH_CTX_SWITCH(1), 0);
            rsx_wr32(RSX_PGRAPH_CTX_SWITCH(2), 0);
            rsx_wr32(RSX_PGRAPH_CTX_SWITCH(3), 0);
            rsx_wr32(RSX_PGRAPH_CTX_SWITCH(4), 0);
            rsx_wr32(0x28000401040, 0);
            rsx_wr32(0x28000401044, 0);
            rsx_wr32(0x28000401048, 0);
            rsx_wr32(0x2800040104C, 0);
            rsx_wr32(0x28000401040, 0);
            rsx_wr32(0x28000401080, 0);
            rsx_wr32(0x28000401084, 0);
            rsx_wr32(0x28000401088, 0);
            rsx_wr32(0x2800040108C, 0);
            rsx_wr32(0x28000401080, 0);
            
            return;
        }
    }
    
    printf("rsx driver assert failed. [%s : %04d : %s()]\n", __FILE__, __LINE__, __func__);
  return;
}


/***********************************************************************
* 
***********************************************************************/
S32 rsx_device_graph_21EF60(S64 *vtab) {
    S32 i, value, unit_n = 0;
    
    //////////////////////////////////////////////////////////////////////
    // get BAR0 register value
    value = rsx_rd32(0x28000001540);    // NV40_PMC_GRAPH_UNITS
    value = (value & 0x1FF00)>>8;        // value[15:23]
    //////////////////////////////////////////////////////////////////////
    
    // count graph units
    for (i = 0; i < 9; i++)
        if (value & (1<<i))
          unit_n++;
    
    // based on graph unit count...
    if ((unit_n == 1) || (unit_n == 2) || (unit_n == 3))
      return 0xC103F00;
    
    if (unit_n == 4)
      return 0x20103F00;
    
    if ((unit_n == 5) || (unit_n == 6) || (unit_n == 7) || (unit_n == 8)) 
      return 0x40103F00;         // PS3 have 8 graph units
    
    // else error
    printf("rsx driver assert failed. [%s : %04d : %s()]\n", __FILE__, __LINE__, __func__);
    
    return 0;
}


/***********************************************************************
* 
***********************************************************************/
void rsx_device_graph_21ED38(S64 *vtab, S32 offset, S32 unit_n, S32 unit_map) {
    S32 i, size = 0, ctr1 = 0, ctr2 = 18, tmp1 = 0, tmp2 = 0;
    
    
    size = (rsx_device_graph_21E950() >>2);
    
    // memset graph memory to 0
    for (i = 0; i < size; i++)
      DDR_write32(0, offset + (i * 4) + g_rsx_bar2_addr);
    
    // init graph memory, with hardcoded data
    for (i = 0; i < 462; i+=2)
        DDR_write32(data1[i+1], offset + data1[i] + g_rsx_bar2_addr);
    
    for (i = 0; i < 736; i+=2)
        DDR_write32(data2[i+1], offset + data2[i] + g_rsx_bar2_addr);
    
    for (i = 0; i < 352; i+=2)
        DDR_write32(data3[i+1], offset + data3[i] + g_rsx_bar2_addr);
    
    for (i = 0; i < 16; i++)
      DDR_write32(0x3F800000, offset + 0x3020 + (i * 8) + g_rsx_bar2_addr);
    
    // if no graph units, nothing to do
    if (unit_n == 0)
      return;
    
    // if graph units, we have 8, init each unit with hardcoded data
    while (unit_n != ctr1) {
        if (((1 <<ctr1) & unit_map) == 0)
          goto label0;
        
        if ((tmp1 = data4[(ctr2 - 1) * 2]) == 0)
          goto label1;
      
        tmp2 = ((data4[((ctr2 - 1) * 2) + 1]) <<2) + offset;
        
        for (i = 0; i < tmp1; i+=6)
            DDR_write32(1, tmp2 + (i / 6 * 0x18) + g_rsx_bar2_addr);
        
label1:
        if ((tmp1 = data4[ctr2 * 2]) == 0)
          goto label0;
        
        tmp2 = ((data4[ctr2 * 2 + 1]) <<2) + offset;
        
        for (i = 0; i < tmp1; i+=4)
          DDR_write32(0x3F800000, tmp2 + (i / 4 * 0x10) + g_rsx_bar2_addr);
        
label0:
    ctr1++;
        ctr2+=8;
    }
    
    return;
}


/***********************************************************************
* 
***********************************************************************/
void rsx_device_graph_21DA04(rsx_device_graph_t* graph, S32 idx) {
    S32 i, tmp, offset, value, unit_n = 0, unit_map = 0;
    rsx_core_device_t* core = NULL;
    
    
    // get device core object, we need IOIF0 next
    core = rsx_core_device_get_core_object_by_id(g_rsx_core_id);
    RSX_ASSERT(core);
    
    // get address offset, if offset is valid(not out of address range)
    offset = rsx_core_memory_get_BAR2_offset_by_address((void*)core->core_mem, graph->channel_addr[idx]); 
    
    //////////////////////////////////////////////////////////////////////
    rsx_wr32(0xFF3F, 0x28000001540);   // TEST: 8 units like in original dump
    value = rsx_rd32(0x28000001540);    // NV40_PMC_GRAPH_UNITS
    unit_map = (value & 0x1FF00)>>8;     // value[15:23]
    //////////////////////////////////////////////////////////////////////
    
    // count graph units
    for (i = 0; i < 9; i++)
        if (unit_map & (1<<i))
          unit_n++;
    
    // set graph memory
    rsx_device_graph_21ED38(NULL, offset, unit_n, unit_map);
    
    // finaly, set some values in graph memory
    // get ?, based on graph unit count, 6 -> 0x40103F00
    tmp = rsx_device_graph_21EF60(NULL);
    
    // ? set a flag into graph memory
    value = DDR_read32(graph->unk_0A4 + offset + g_rsx_bar2_addr);
    value |= 1;
    DDR_write32(value, graph->unk_0A4 + offset + g_rsx_bar2_addr);
    
    // ? set a value into graph memory to 1
    DDR_write32(1, graph->unk_098 + offset + g_rsx_bar2_addr);
    
    // store graph offset / 16 into graph memory
    DDR_write32(graph->graph_offset >>4, graph->unk_09C + offset + g_rsx_bar2_addr);
    
    // store 0x40103F00 into graph memory
    DDR_write32(tmp, graph->unk_0A8 + offset + g_rsx_bar2_addr);
    
    return;
}


/***********************************************************************
* 
***********************************************************************/
S32 rsx_device_graph_21E950() {
    return 0x2CCE0; // a size value, 183520 byte
}

/***********************************************************************
* 
***********************************************************************/
S32 rsx_device_graph_21D6C0() {
    return rsx_device_graph_21E950();
}

/***********************************************************************
* 
***********************************************************************/
void rsx_device_graph_21E95C(S64 *vtab, S32 *arg1, S32 *arg2, S32 *arg3, S32 *arg4, S32 *arg5) {
    // some special offsets into graph memory
    *arg1 = 0x30;
    *arg2 = 0;
    *arg3 = 0x11C;
    *arg4 = 0xC58;
    *arg5 = 0x9BC;
  
    return;
}


/***********************************************************************
* 
***********************************************************************/
void rsx_device_graph_21DD9C(rsx_device_graph_t* graph) {
    S32 tmp = 0, idx = 0;
    rsx_core_device_t* core = NULL;
    
    
    // get device core object, we need IOIF0 next
    core = rsx_core_device_get_core_object_by_id(g_rsx_core_id);
    RSX_ASSERT(core);
    
    // get graph address, 0x28002060000 and size, 0x80000(512 KB)
    graph->graph_addr = rsx_core_memory_get_mem_reg_addr_by_id((void*)core->core_mem, 6);
    graph->graph_size = rsx_core_memory_get_mem_reg_size_by_id((void*)core->core_mem, 6);
    
    // get graph offset, if offset is valid(not out of address range)
    graph->graph_offset = rsx_core_memory_get_BAR2_offset_by_address((void*)core->core_mem, graph->graph_addr);
    
    
    // ? store some offset values into graph object
    rsx_device_graph_21E95C(NULL, &graph->unk_098, &graph->unk_09C, &graph->unk_0A0, &graph->unk_0A4, &graph->unk_0A8);
    
    
    // get total count from core object bitmap, the 4 RSX channels
    graph->max_channels = rsx_utils_bitmap_get_item_total((void*)core->bm_obj_channels);
    
    // set channel address array into graph object to 0
    memset(&graph->channel_addr, 0, 0x80);
    
    // ? get value 0x2CCE0, a size
    tmp = (rsx_device_graph_21D6C0() + 0xFF) & 0xFFFFFF00;
    
    // for each channel
    if (graph->max_channels != 0) {
        while (idx != graph->max_channels) {
            graph->channel_addr[idx] = graph->graph_addr;
      
      if ((rsx_core_device_get_rsx_enable_flag()) == 0)
                graph->channel_addr[idx] += tmp;  // += 0x2CD00
      
      // init graph memory, set flags, ...
      rsx_device_graph_21DA04(graph, idx);
      
            idx++;
        }
    }
    
    // if array address >= graph memory end, error
    if ((graph->channel_addr[graph->max_channels - 1]) >= (graph->graph_addr + graph->graph_size)) {
        printf("rsx driver assert failed. [%s : %04d : %s()]\n", __FILE__, __LINE__, __func__);
        return;
    }
    
    return;
}


/***********************************************************************
* 
***********************************************************************/
void rsx_device_graph_21E93C(S64 *vtab, S64 *arg1, S32 *arg2) {
    // skipped
    return;
}


/***********************************************************************
* feed RSX with data ? 
***********************************************************************/
void rsx_device_graph_21D7A0(rsx_device_graph_t* graph) {
    S32 i;
    
  
    // write request?
    rsx_wr32(0, 0x28000400324);             // set to 0
    
    // send to RSX over register BAR0:0x28000400328, a eieio instruction after each write, kk
    for (i = 0; i < 162; i++)
        rsx_wr32(data0[i], 0x28000400328);
  
    return;
}


/***********************************************************************
* 
***********************************************************************/
void rsx_device_graph_init(rsx_device_graph_t* graph) {
    //S64 *vtab = NULL;
    
    
    // ?
    graph->unk_194 = 0;
    
    // allocate and store vtab pointer, no need in C
    /*vtab = lv1_kmalloc(sizeof(S64));
    if (vtab == NULL) {
        printf("rsx driver assert failed. [%s : %04d : %s()]\n", __FILE__, __LINE__, __func__);
        return;
    }*/
    graph->vtab = NULL;
    
    // ?
    rsx_device_graph_21D7A0(graph);
    
    // ?
    rsx_device_graph_21DD9C(graph);
    
    // init/setup BAR0 registers
    rsx_device_graph_21D350(graph);
    
    return;
}
